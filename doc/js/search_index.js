var search_data = {"index":{"longSearchIndex":["enumerable","libertydatabase","plot","libertydatabase#close()","plot#findoutliers()","enumerable#fivenumsum()","plot#generateplot()","libertydatabase#getcellfootprint()","libertydatabase#getcells()","libertydatabase#getcellsinfootprint()","libertydatabase#getdata()","libertydatabase#getfootprints()","libertydatabase#getleakage()","libertydatabase#getoutputmaxcap()","libertydatabase#getpvt()","libertydatabase#gettimingdata()","enumerable#mean()","enumerable#median()","libertydatabase::new()","plot::new()","libertydatabase#query()","enumerable#stddev()","enumerable#sum()","enumerable#variance()"],"info":[["Enumerable","","Enumerable.html","","<p>Add methods to Enumerable, which makes them available to Array\n"],["LibertyDatabase","","LibertyDatabase.html","","<p>LibertyDatabase is a class to connect to and query a MySQL database\ncontaining Liberty file data\n"],["Plot","","Plot.html","","<p>Plot is a class to generate various plots from given data.\n"],["close","LibertyDatabase","LibertyDatabase.html#method-i-close","()","<p>Close the database and logfile\n"],["findOutliers","Plot","Plot.html#method-i-findOutliers","( filename = \"outliers\", k = 1 )","<p>Find outliers for a given set of data and print them to a file. Outliers\nare defined as any numbers that …\n"],["fiveNumSum","Enumerable","Enumerable.html#method-i-fiveNumSum","()","<p>Return the five number summary as an Array\n"],["generatePlot","Plot","Plot.html#method-i-generatePlot","( options={} )","<p>Generate plots. Data files are generated for both histograms and scatter\nplots. The histogram data file …\n"],["getCellFootprint","LibertyDatabase","LibertyDatabase.html#method-i-getCellFootprint","( cell )","<p>Get the footprint of a single cell\n<p>Parameters\n<p>cell &mdash; The cell to query\n"],["getCells","LibertyDatabase","LibertyDatabase.html#method-i-getCells","()","<p>Get all cells in the database\n<p>Returns\n<p>result &mdash; An Array containing the names of all cells as strings\n"],["getCellsInFootprint","LibertyDatabase","LibertyDatabase.html#method-i-getCellsInFootprint","( footprint )","<p>Get all of the cells with a given footprint\n<p>Parameters\n<p>footprint &mdash; The footprint to query\n"],["getData","LibertyDatabase","LibertyDatabase.html#method-i-getData","( parameter, options={} )","<p>Retrieve data from the SQL database\n<p>Parameters\n<p>parameter &mdash; The database parameter to query.  Must be the …\n"],["getFootprints","LibertyDatabase","LibertyDatabase.html#method-i-getFootprints","()","<p>Get an array of all cell footprints\n<p>Returns\n<p>result &mdash; An Array containing the names of all cell footprints …\n"],["getLeakage","LibertyDatabase","LibertyDatabase.html#method-i-getLeakage","( options={} )","<p>Retrieve leakage data with “when” conditions\n<p>Options\n<p>:cells &mdash; An array of cells to query.  <code>nil</code> …\n"],["getOutputMaxCap","LibertyDatabase","LibertyDatabase.html#method-i-getOutputMaxCap","(options={})","<p>Query Max Capacitance values for output pins of all cells. If a cell has\nmore than one output, add the …\n"],["getPVT","LibertyDatabase","LibertyDatabase.html#method-i-getPVT","()","<p>Get the current PVT corner (Not Implemented)\n<p>Returns\n<p><code>nil</code>\n"],["getTimingData","LibertyDatabase","LibertyDatabase.html#method-i-getTimingData","(options = {})","<p>Query timing data for cells or cell footprints\n<p>Options\n<p>:cells &mdash; An array of cells to query.  <code>nil</code> uses all …\n"],["mean","Enumerable","Enumerable.html#method-i-mean","()","<p>Return the mean of the data\n"],["median","Enumerable","Enumerable.html#method-i-median","()","<p>Return the median of the data\n"],["new","LibertyDatabase","LibertyDatabase.html#method-c-new","( options = {} )","<p>Constructor\n<p>Options\n<p>:pvt &mdash; The PVT used by this database.  Defaullt is <code>nil</code>.\n"],["new","Plot","Plot.html#method-c-new","( x, y=nil )","<p>Constructor\n<p>Parameters\n<p>x &mdash; The data to be used on the x-axis. Passed as hash.\n"],["query","LibertyDatabase","LibertyDatabase.html#method-i-query","( string, &block )","<p>Perform a custom database query with logging\n<p>Parameters\n<p>string &mdash; A string containing the SQL query terminated …\n"],["stdDev","Enumerable","Enumerable.html#method-i-stdDev","()","<p>Return the standard deviation of the data\n"],["sum","Enumerable","Enumerable.html#method-i-sum","()","<p>Return the sum of the data\n"],["variance","Enumerable","Enumerable.html#method-i-variance","()","<p>Return the variance of the data\n"]],"searchIndex":["enumerable","libertydatabase","plot","close()","findoutliers()","fivenumsum()","generateplot()","getcellfootprint()","getcells()","getcellsinfootprint()","getdata()","getfootprints()","getleakage()","getoutputmaxcap()","getpvt()","gettimingdata()","mean()","median()","new()","new()","query()","stddev()","sum()","variance()"]}}